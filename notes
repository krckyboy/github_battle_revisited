
/* 1. Use PropTypes for components using props.
 It makes sure you get the right type of data, and makes things much easier to debug. It also makes things easier when working in a team.
*/
import PropTypes from 'prop-types'

function Badge(props) {
    return (
        <div>
            <img
                src={props.img}
                alt="Avatar"
                style={{ width: 100, height: 100 }}
            />
            <h1>Name: {props.name}</h1>
            <h3>username: {props.username}</h3>
        </div>
    )
}

Badge.propTypes = {
    img: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    username: PropTypes.string.isRequired,
}

/* 2. Pure function
    - Doesn't depend on variables outside its scope
    - Doesn't modify variables outside its scope
    - Doesn't make Ajax requests
    - Doesn't manipulate the DOM
*/

// 3. Dynamically setting up styles
<li style={lang === this.state.selectedLanguage ? { color: '#d0021b' } : null}> {lang} </li>
           

// 4. Passing a function to a child component
        /* Passing a function to a child component as a prop (click), 
        and then in the child component, we use it for onClick,
        passing the argument.*/
// Parent:
<SelectLanguage selectedLanguage={this.state.selectedLanguage} click={this.updateLanguage} />
// Child:
<li onClick={() => props.click(lang)}{lang}></li>

// 5. First deal with synchronous code, and then async
updateLanguage = async (lang) => {
    // First we handle the synchronous code
    this.setState({ selectedLanguage: lang, repos: null })

    // And then the async, to avoid slow reaction for 'active' UI
    const repos = await fetchPopularRepos(lang)
    this.setState({repos})
}

// 6. React router
npm install --save react-router-dom

// Importing
import { BrowserRouter as Router, Route, Link } from "react-router-dom";

/* Here we're creating a route /popular and rendering Popular for that route. */
class App extends Component {
	render() {
		return (
			<Router>
				<div className="App">
					<Route path='/popular' component={Popular} />
				</div>
			</Router>
		)
	}
}

// Navigation

import { NavLink } from "react-router-dom";

<ul className='nav'>
    <li><NavLink exact activeClassName='active' to='/'>Home</NavLink></li>
    <li><NavLink activeClassName='active' to='/battle'>Battle</NavLink></li>
    <li><NavLink activeClassName='active' to='/popular'>Popular</NavLink></li>
</ul>

// Links

import { Link } from "react-router-dom";
<Link className='button' to='/battle'>Battle</Link>

// Rendering routes while nav is also visible

class App extends Component {
	render() {
		return (
			<Router>
				<div className="container">
				<Nav />
					<Route path='/popular' component={Popular} />
					<Route exact path='/' component={Home} />
				</div>
			</Router>
		)
	}
}

// Switch - adding a 404 page text. But you can also dedicate a component for it.
// It basically goes through all the routes, and if it doesn't find, it'll render the last Route.

import { BrowserRouter as Router, Route, Switch } from "react-router-dom";

class App extends Component {
	render() {
		return (
			<Router>
				<div className="container">
					<Nav />
					<Switch>
						<Route exact path='/' component={Home} />
						<Route exact path='/battle' component={Battle} />
						<Route path='/popular' component={Popular} />
                        <Route render={() => <p>Not found!</p>} />
					</Switch>
				</div>
			</Router>
		)
	}
}

// 7. Controlled components (forms)

// 8. Passing func to a child component
    /* 
    We'll be passing this function to a child component as a prop, and then, once we call the function in the child component, it will send back the ID and username to the parent component.
    */
    handleSubmit = (id, username) => {
        this.setState(() => {
            const newState = {}
            newState[id + 'Name'] = username
            newState[id + 'Image'] = `https://github.com/${username}.png?size=200`
            return newState
        })
    }

// 9. Using && as shorthand if statement

/*
    If !playerOneName is truthy, return <PlayerInput />
 */

    render() {
        const playerOneName = this.state.playerOneName
        const playerTwoName = this.state.playerTwoName
        return (
            <div>
                <div className="row">
                    {!playerOneName &&
                        <PlayerInput />} 

                    {!playerTwoName &&
                        <PlayerInput />} 
                </div>
            </div>
        )
    }

// 10. Disable a button if state is falsey

    <button
        className='button'
        type='submit'
        disabled={!this.state.username}>
        Submit
    </button>

// 11. Dynamic routes!
/*
    First you import Link, which will lead to that route. 
    React also passes some info through props, such as the current URL (through this.props.match)

*/
    import { Link } from 'react-router-dom'
    const { match } = this.props

    <Link
        className='button'
        to={{
            pathname: `${match.url}/results`,
            search: `?playerOneName=${playerOneName}&playerTwoName=${playerTwoName}`
        }}>
        Battle
    </Link>

/*
    You then also make a route in the App.js, leading to let's say /battle/results, passing the component that you want it to render.
    In that new component, you can parse properties from URL with an npm package which will treat it as an object (makes things easier)
    You parse it from this.props.location.search (if search is the property)
*/
    npm install --save query-string

    <Route path='/battle/results' component={Results} />

/* 
    console.log(this.props.location.search) // ?playerOneName=asd&playerTwoName=dsa
*/

import queryString from 'query-string'
const players = queryString.parse(this.props.location.search) // {playerOneName: 'krckyboy', playerTwoName: 'tylermcginnis'}


// 12. Props.children

    class PlayerPreview extends Component {
        static propTypes = {
            avatar: PropTypes.string.isRequired,
            username: PropTypes.string.isRequired,
        }
        render() {
            return (
                <div>
                    <div className="column">
                        <img className='avatar' src={this.props.avatar} alt={`Avatar for ${this.props.username}`} />
                        <h2 className='username'>@{this.props.username}</h2>
                    </div>
                    /* Here you pass the children. */
                    {this.props.children}
                </div>
            )
        }
    }

    /* 
        When you want to use it:
    */

    <PlayerPreview avatar={playerTwoImage} username={playerTwoName} >
        <button className='reset' onClick={() => this.handleReset('playerTwo')}>Reset</button>
    </PlayerPreview>

// 13. Default props

    class Loading extends Component {
        state = {
            text: this.props.text
        }

        static defaultProps = {
            text: 'Loading'
        }

        render() {
            return (
                <p style={styles.content}>
                    {this.state.text}
                </p>
            )
        }
    }

    /* 
        And then, you can pass in the custom text if you want
    */

    <Loading text='loading yo' />

// 14. Getting rid of error --- isMounted. Basically, you get an error if you try to setState to an unmounted component, so there's a workaround for that:

// Inside a component...

    _isMounted = false

    componentDidMount() {
        this._isMounted = true
        this.updateLanguage(this.state.selectedLanguage)
    }

    componentWillUnmount() {
        this._isMounted = false
    }

    updateLanguage = async (lang) => {
        this.setState({ selectedLanguage: lang, repos: null })
        const repos = await fetchPopularRepos(lang)
        if (this._isMounted) {
            this.setState({ repos })
        }
    }